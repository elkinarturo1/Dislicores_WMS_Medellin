@inject IFileReaderService fileReaderService
@inject IJSRuntime JSRuntime

<div style="width:500px;float:left;">

    <div>
        <input type="file" @ref="@inputElement" accept=".xls, .xlsx">
    </div>

    <div>
        <MatButton Raised="true" Icon="content_paste" @onclick="async ()=> await subirArchivo()">Subir Archivo</MatButton>
    </div>

</div>



@code {

    bool bitVisualizarDisplay = false;
    RespuestaJson respuestaJson = new RespuestaJson();

    ElementReference inputElement;


    public async Task<string> subirArchivo()
    {
        bitVisualizarDisplay = true;

        try
        {

            List<string> listadoArchivos = new List<string>();
            string ArchivoBase64 = "";

            ArchivoCargadoModel archivo = new ArchivoCargadoModel();

            foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
            {

                using (MemoryStream memorystream = await file.CreateMemoryStreamAsync(4 * 1024))
                {

                    byte[] bytesimage = new byte[memorystream.Length];
                    memorystream.Read(bytesimage, 0, (int)memorystream.Length);
                    ArchivoBase64 = Convert.ToBase64String(bytesimage);
                    //imagen64 = Convert.FromBase64String (bytesimage);
                    //StateHasChanged();

                    listadoArchivos.Add(ArchivoBase64);


                    string nombreArchivo = $"PlantilaUN_{DateTime.Now.ToString("yyyyMMddmmssff")}.xlsx";
                    string archivoBase64 = ArchivoBase64;
                    byte[] archivoBytes = bytesimage;

                    archivo.nombreArchivo = nombreArchivo;
                    archivo.archivoBase64 = archivoBase64;
                    archivo.archivoBytes = archivoBytes;

                    ArchivosBL archivosBL = new ArchivosBL();
                    respuestaJson = archivosBL.SubirArchivo(archivo);
                    //await Http.PostAsJsonAsync<ArchivoCargadoModel>("api/Plantillas/SubirArchivo", archivo);
                    //await File.WriteAllBytesAsync($"wwwroot/excel/PlantillasCargadas/{nombreArchivo}", bytesimage);

                }

            }

            if (ArchivoBase64.Length > 0)
            {
                //var response = await Http.PostAsJsonAsync<ArchivoCargadoModel>("api/Plantillas/SubirArchivo", archivo);
                //respuestaJson = response.Content.ReadFromJsonAsync<RespuestaJson>().Result;
            }
            else
            {
                //respuestaJson.bitError = true;
                //respuestaJson.resultado = "Primero debe seleccionar un archivo en excel para subir";
            }



            //if (respuestaJson.bitError)
            //{
            //    ActivarCargando = "None";
            //    await js.MensajeProcesoError(respuestaJson.resultado);
            //}


        }
        catch (Exception ex)
        {
            //ActivarCargando = "None";
            //respuestaJson.bitError = true;
            //await js.MensajeProcesoError("Error subiendo el archivo " + ex.Message);
        }

        bitVisualizarDisplay = false;
        StateHasChanged();


        if (respuestaJson.bitError == false)
        {
            await JSRuntime.MensajeProcesoOK();
        }
        else
        {
            await JSRuntime.MensajeProcesoError(respuestaJson.resultado);
        }

        return "nombrearchivo";

    }

}
