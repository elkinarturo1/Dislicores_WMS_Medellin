@page "/Actualizar_NielsenD_x_Vendedor/{idCriterio_VEN}"
@inject IJSRuntime JSRuntime

<h3>Actualizar_NielsenD_x_Vendedor</h3>

<div style="width:300px;float:left">
    <MatThemeProvider>
        <RadzenButton Click=actualizarDatos Text="Actualizar" />
    </MatThemeProvider>
</div>

<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@listadoResultados" TItem="Criterio_Cliente_Model" ColumnWidth="100px"
            PageSize="38" AllowPaging="true" AllowSorting="true"
            Style="width:1080px">
    <Columns>

        <RadzenGridColumn TItem="Criterio_Cliente_Model" Property="F206_ID_CIA" Title="F206_ID_CIA" Width="50px" />
        <RadzenGridColumn TItem="Criterio_Cliente_Model" Property="F200_ID" Title="F200_ID" Width="150px" />
        <RadzenGridColumn TItem="Criterio_Cliente_Model" Property="F200_NIT" Title="F200_NIT" Width="150px" />
        <RadzenGridColumn TItem="Criterio_Cliente_Model" Property="F207_ID_SUCURSAL" Title="F207_ID_SUCURSAL" Width="150px" />
        <RadzenGridColumn TItem="Criterio_Cliente_Model" Property="Nuevo_NielsenD" Title="Nuevo_NielsenD" Width="150px" />        

    </Columns>
</RadzenGrid>

@code {

    [Parameter] public string idCriterio_VEN { get; set; } = "";

    ActualizacionUN_Bl procesoBL = new ActualizacionUN_Bl();
    RespuestaJson respuestaJson = new RespuestaJson();
    public List<Criterio_Cliente_Model> listadoResultados = new List<Criterio_Cliente_Model>();

    protected override async Task OnInitializedAsync()
    {
        await consultaInicial();
    }

    protected async Task consultaInicial()
    {
        try
        {
            respuestaJson = procesoBL.consultar_Terceros_x_Vendedor(idCriterio_VEN);
            if (respuestaJson.bitError == false)
            {
                listadoResultados = (List<Criterio_Cliente_Model>)respuestaJson.datos;
            }
        }
        catch (Exception ex)
        {
            respuestaJson.resultado = ex.Message;
        }

        if (respuestaJson.bitError == true)
        {
            await JSRuntime.MensajeProcesoError(respuestaJson.resultado);
        }
    }



    public async Task actualizarDatos()
    {
        try
        {
            respuestaJson = await procesoBL.acutalizar_NielsenD_x_Vendedor(listadoResultados);
            if (respuestaJson.bitError == false)
            {
                listadoResultados = (List<Criterio_Cliente_Model>)respuestaJson.datos;
            }         
        }
        catch (Exception ex)
        {
            respuestaJson.resultado = ex.Message;
        }

        if (respuestaJson.bitError == true)
        {
            await JSRuntime.MensajeProcesoError(respuestaJson.resultado);
        }
        else
        {
            await JSRuntime.MensajeProcesoOK();
        }
    }

}
