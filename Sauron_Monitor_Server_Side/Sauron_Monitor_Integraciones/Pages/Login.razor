@page "/"
@layout Layout_Login
@inject NavigationManager navigationManager
@inject ProtectedSessionStorage sessionStorage
@inject IJSRuntime JSRuntime


@if (bitVisualizarDisplay)
{
    <DivCargando />
}


<div class="limiter">
    <div class="container-login100">
        <div class="wrap-login100">
            <div class="login100-form">

                <EditForm Model="@respuestaJson" OnValidSubmit="autenticarse">

                    <span class="login100-form-title p-b-26">
                        Dislicores
                    </span>
                    <span class="login100-form-title p-b-48">
                        Sauron Monitor Integraciones
                    </span>

                    <div class="wrap-input100 validate-input">
                        <input type="text" class="input100" @bind-value="@usuario" />
                        <span class="focus-input100" data-placeholder="Usuario"></span>
                    </div>


                    <div class="wrap-input100 validate-input" data-validate="Enter password">
                        <span class="btn-show-pass">
                            <i class="zmdi zmdi-eye"></i>
                        </span>
                        <input type="password" class="input100" @bind-value="@clave" />
                        <span class="focus-input100" data-placeholder="Password"></span>
                    </div>

                    <div class="container-login100-form-btn">
                        <div class="wrap-login100-form-btn">
                            <div class="login100-form-bgbtn"></div>
                            <button type="submit" style="padding-left:40%">Ingresar</button>
                        </div>
                    </div>

                </EditForm>

            </div>
        </div>

    </div>

</div>

@code {

    bool bitVisualizarDisplay = false;
    string usuario = "";
    string clave = "";

    RespuestaJson respuestaJson = new RespuestaJson();
    public List<UsuariosModel> listadoResultados = new List<UsuariosModel>();

    protected async Task autenticarse()
    {

        UsuariosBL usuariosBL = new UsuariosBL();
        bitVisualizarDisplay = true;

        try
        {

            respuestaJson = usuariosBL.autenticacion(usuario, clave);

            if (respuestaJson.bitError == false)
            {

                listadoResultados = (List<UsuariosModel>)respuestaJson.datos;
                UsuariosModel usuario = listadoResultados.FirstOrDefault();

                //Asignar variables de session
                await sessionStorage.SetAsync("id", usuario.id);
                await sessionStorage.SetAsync("usuario", usuario.usuario);
                await sessionStorage.SetAsync("clave", usuario.clave);

            }           

        }
        catch (Exception ex)
        {
            respuestaJson.resultado = ex.Message;            
        }


        bitVisualizarDisplay = false;
        StateHasChanged();
        if (respuestaJson.bitError == false)
        {
            navigationManager.NavigateTo("Index");
            //await JSRuntime.MensajeProcesoOK();
        }
        else
        {
            await JSRuntime.MensajeProcesoError(respuestaJson.resultado);
        }

    }

}
