@page "/administracion/usuarioscrear"
@page "/administracion/usuarioseditar/{idUsuario:int}"
@page "/administracion/usuarioseliminar/{idUsuario:int}/{eliminarDato:int}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject ProtectedSessionStorage sessionStorage

<div class="row alert bg-info">
    <div class="row col-md-1">
    </div>
    <div class="col-md-4">
        @if (idUsuario == 0)
        {
            <h5> <b>Nuevo</b></h5>
        }
        else
        {
            if (eliminarDato == 0)
            {
                <h5> <b>Editar</b></h5>
                <p>Datos a Editar</p>
            }
            else
            {
                <h5> <b>Eliminar</b></h5>
                <p>Datos a Eliminar</p>
            }
        }
    </div>
</div>


@if (eliminarDato == 0)
{
    <EditForm Model="@model" OnValidSubmit="guardar">

        <div class="row">

            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenNumeric Disabled="true" TValue="int" @bind-Value=@model.id Placeholder="id" Class="w-100" />
            </div>

            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenTextBox @bind-Value="@model.codigo" Class="w-100" Placeholder="codigo" />
            </div>

        </div>

        <br />

        <div class="row">

            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenTextBox @bind-Value="@model.usuario" Class="w-100" Placeholder="usuario" />
            </div>

            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenTextBox @bind-Value="@model.clave" Class="w-100" Placeholder="clave" />
            </div>

        </div>

        <br />

        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-2">
                <a href="/administracion/usuarios">
                    <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Warning" />
                </a>
            </div>

            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Secondary" Click=guardar />
            </div>
        </div>

    </EditForm>
}
else
{
    /**Formulario de eliminacion************************************************************************************************************/
    <div class="row">

        <div class="col-md-1"></div>
        <div class="col-md-4">
            <p>idUsuario @model.id</p>
        </div>

        <div class="col-md-1"></div>
        <div class="col-md-4">
            <RadzenTextBox @bind-Value="@model.usuario" Class="w-100" Placeholder="nombre" ReadOnly="true" />
        </div>

    </div>

    <br />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <a href="/Administracion/usuarios">
                <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Warning" />
            </a>
        </div>

        <div class="col-md-2">
            <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Secondary" Click=@(async () => await EliminarDato(idUsuario)) />
        </div>
    </div>
    /**Formulario de eliminacion************************************************************************************************************/
}



<br />

@code {

    [Parameter] public int idUsuario { get; set; } = 0;
    [Parameter] public int eliminarDato { get; set; } = 0;

    public UsuariosModel model = new UsuariosModel();
    RespuestaJson respuestaJson = new RespuestaJson();

    List<UsuariosModel> listadoResultados = new List<UsuariosModel>();
    UsuariosBL procesoBL = new UsuariosBL();


    protected override async Task OnInitializedAsync()
    {
        if (idUsuario != 0)
        {
            await consultaInicial();
        }
    }


    public async Task consultaInicial()
    {
        try
        {

            idUsuario = (idUsuario == 0) ? -1 : idUsuario;
            respuestaJson = procesoBL.consultarUsuarios(idUsuario, "-1", "-1");

            if (respuestaJson.bitError == false)
            {
                listadoResultados = (List<UsuariosModel>)respuestaJson.datos;
                model = listadoResultados.FirstOrDefault();
            }

        }
        catch (Exception ex)
        {
            respuestaJson.resultado = ex.Message;
        }

        StateHasChanged();
        if (respuestaJson.bitError == true)
        {
            await JSRuntime.MensajeProcesoError(respuestaJson.resultado);
        }
    }


    public async Task guardar()
    {

        try
        {

            if (idUsuario != 0)
            {
                respuestaJson = procesoBL.Usuario_Actualizar(model);
            }
            else
            {
                respuestaJson = procesoBL.Usuario_Crear(model);
            }

            if (respuestaJson.bitError)
            {
                await JSRuntime.MensajeProcesoError(respuestaJson.resultado);
            }
            else
            {
                await JSRuntime.MensajeProcesoOK();
                navigationManager.NavigateTo("/administracion/usuarios");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.MensajeProcesoError(ex.Message);
        }

        StateHasChanged();

    }


    public async Task EliminarDato(int id = -1)
    {

        try
        {
            respuestaJson = procesoBL.Usuario_Eliminar(id);
            if (respuestaJson.bitError)
            {
                await JSRuntime.MensajeProcesoError(respuestaJson.resultado);
            }
            else
            {
                await JSRuntime.MensajeProcesoOK();
                navigationManager.NavigateTo("/administracion/usuarios");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.MensajeProcesoError(ex.Message);
        }

        StateHasChanged();

    }

}
